#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct t_num_particles
{
    uint u_num_particles;
};

struct particle_t
{
    float2 position;
    float2 velocity;
};

struct particle_t_1
{
    float2 position;
    float2 velocity;
};

struct t_particles
{
    particle_t_1 b_particles[1];
};

struct t_mouse_position
{
    float2 u_mouse_position;
};

struct t_force
{
    float u_force;
};

struct t_delta_time
{
    float u_delta_time;
};

constant uint3 gl_WorkGroupSize [[maybe_unused]] = uint3(64u, 1u, 1u);

kernel void main0(constant t_delta_time& _72 [[buffer(0)]], constant t_num_particles& _19 [[buffer(1)]], constant t_mouse_position& _55 [[buffer(2)]], constant t_force& _65 [[buffer(3)]], device t_particles& _39 [[buffer(4)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    uint id = gl_GlobalInvocationID.x;
    if (id >= _19.u_num_particles)
    {
        return;
    }
    particle_t particle;
    particle.position = _39.b_particles[id].position;
    particle.velocity = _39.b_particles[id].velocity;
    float2 direction = particle.position - _55.u_mouse_position;
    float2 force = ((fast::normalize(direction) * _65.u_force) * _72.u_delta_time) / float2(fast::max(length(direction), 0.001000000047497451305389404296875));
    particle.velocity += force;
    particle.position += particle.velocity;
    _39.b_particles[id].position = particle.position;
    _39.b_particles[id].velocity = particle.velocity;
}

